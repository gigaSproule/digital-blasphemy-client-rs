name: 'Run main workflow'

on:
  pull_request:
  push:
    branches:
      - "main"
    tags:
      - "*"

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  check-formatting:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    if: github.ref_type != 'tags'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run formatting check
        run: cargo fmt --all -- --check
  lint:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    if: github.ref_type != 'tags'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run lint
        run: cargo clippy --all-features --all-targets
  test-linux:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    if: github.ref_type != 'tags'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Run tests
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run tests
        run: cargo test
  test-windows:
    runs-on: "windows-latest"
    timeout-minutes: 30
    if: github.ref_type != 'tags'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run tests
        run: cargo test
  test-macos:
    runs-on: "macos-latest"
    timeout-minutes: 30
    if: github.ref_type != 'tags'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run tests
        run: cargo test
  build-linux:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    if: github.event_name != 'pull_request' && !failure()
    needs:
      - test-linux
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run build
        run: cargo build --release
      - name: Rename binary
        run: mv target/release/libdigital_blasphemy_client.rlib target/release/libdigital_blasphemy_client_linux.rlib
      - name: Temporarily save linux binary
        uses: actions/upload-artifact@v4
        with:
          name: digital-blasphemy-client-linux
          path: target/release/libdigital_blasphemy_client_linux.rlib
          retention-days: 1
  build-windows:
    runs-on: "windows-latest"
    timeout-minutes: 30
    if: github.event_name != 'pull_request' && !failure()
    needs:
      - test-windows
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run build
        run: cargo build --release
      - name: Rename binary
        run: mv target\release\libdigital_blasphemy_client.rlib target\release\libdigital_blasphemy_client_windows.rlib
      - name: Temporarily save windows binary
        uses: actions/upload-artifact@v4
        with:
          name: digital-blasphemy-client-windows
          path: target\release\libdigital_blasphemy_client_windows.rlib
          retention-days: 1
  build-macos:
    runs-on: "macos-latest"
    timeout-minutes: 30
    if: github.event_name != 'pull_request' && !failure()
    needs:
      - test-macos
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run build
        run: cargo build --release
      - name: Rename binary
        run: mv target/release/libdigital_blasphemy_client.rlib target/release/libdigital_blasphemy_client_macos.rlib
      - name: Temporarily save mac os binary
        uses: actions/upload-artifact@v4
        with:
          name: digital-blasphemy-client-macos
          path: target/release/libdigital_blasphemy_client_macos.rlib
          retention-days: 1
  release:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    needs:
      - build-linux
      - build-windows
      - build-macos
    steps:
      - name: Retrieve saved linux binary
        uses: actions/download-artifact@v4
        with:
          name: digital-blasphemy-client-linux
      - name: Retrieve saved windows binary
        uses: actions/download-artifact@v4
        with:
          name: digital-blasphemy-client-windows
      - name: Retrieve saved mac os binary
        uses: actions/download-artifact@v4
        with:
          name: digital-blasphemy-client-macos
      - name: Set version
        if: ${{ github.ref_type == 'tag' }}
        run: cargo set-version ${{ github.ref_name }}
      - name: Commit version
        if: ${{ github.ref_type == 'tag' }}
        run: 'git add Cargo.toml && git commit -m "chore: set version to ${{ github.ref_name }}" && git push'
      - name: Publish to crates.io
        uses: katyo/publish-crates@v2
        with:
          dry-run: ${{ github.ref_type != 'tag' }}
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Create Release
        uses: ncipollo/release-action@v1.18.0
        with:
          artifacts: libdigital_blasphemy_client_linux.rlib,libdigital_blasphemy_client_macos.rlib,libdigital_blasphemy_client_windows.rlib
          generateReleaseNotes: true
          makeLatest: true
